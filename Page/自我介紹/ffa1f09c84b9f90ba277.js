"use strict";class ConversationBoxController{constructor(){this.componentElTag={box:".conversation-box-container",text:".conversation-box-text",nextBtn:".conversation-box-next-btn",conversationBoxOptions:".conversation-box-options"},this.textEl=document.querySelector(this.componentElTag.text),this.nextBtnEl=document.querySelector(this.componentElTag.nextBtn),this.conversationBoxOptionsEl=document.querySelector(this.componentElTag.conversationBoxOptions),this.boxEl=document.querySelector(this.componentElTag.box),this.nextBtnEl.addEventListener("click",(t=>{this.nextConversation(),t.stopPropagation()})),this.boxEl.addEventListener("click",(t=>{this.nextConversation(),t.stopPropagation()})),this.conversationPart}get text(){return this.textEl.innerText}set text(t){new Typed(this.componentElTag.text,{strings:[t],typeSpeed:0,backSpeed:0,fadeOut:!0,loop:!1,fadeOutDelay:20,showCursor:!1})}nextConversation(t){let o,e=this;switch(t&&(console.log("in pare",conversationRecode().part),e.conversationPart=new ConversationIteratorGenerator(conversationRecode()[t])),e.conversationPart||(e.conversationPart=new ConversationIteratorGenerator(conversationRecode().init)),o=e.conversationPart.next().value,console.log(e.conversationPart),o.state){case"print":e.text=o.say,console.log("in say"),this.elDisplayOff(this.conversationBoxOptionsEl);break;case"option":e.text=o.say,e.conversationBoxOptions(o.option);break;default:return console.log(o),e.conversationPart}}conversationBoxOptions(t){const o=this;this.elDisplayOn(this.conversationBoxOptionsEl),o.conversationBoxOptionsEl.innerText="",console.log("in option",t),setTimeout((function(){let e;for(e of t){let t=document.createElement("div");t.setAttribute("onclick",`changeConversation('${e.goTo}')`),t.setAttribute("id",`typed-${e.goTo}`),console.log("in option",t),o.conversationBoxOptionsEl.appendChild(t),new Typed(t,{startDelay:200,strings:[e.say],typeSpeed:0,backSpeed:0,fadeOut:!0,loop:!1,fadeOutDelay:100,showCursor:!1})}o.elDisplayOn(o.conversationBoxOptionsEl)}),1e3)}displayConversationBoxHidden(){this.elNotHidden(this.boxEl)}HiddenConversationBoxHidden(){this.elIsHidden(this.boxEl)}elDisplayOn(t){t.classList.remove("no-display")}elDisplayOff(t){t.classList.add("no-display")}elIsHidden(t){t.classList.remove("hidden")}elNotHidden(t){t.classList.add("hidden")}}class ConversationIteratorGenerator{constructor(t){const o=t;let e=0;return console.log("in iterG",o),{next:function(){return e<o.length?{value:o[e++],done:!1}:{done:!0}}}}}function changeConversation(t){ConversationBox.nextConversation(t)}